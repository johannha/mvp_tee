// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataC.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dataC_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dataC_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dataC_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dataC_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dataC_2eproto;
namespace c {
class EnclaveOutput;
struct EnclaveOutputDefaultTypeInternal;
extern EnclaveOutputDefaultTypeInternal _EnclaveOutput_default_instance_;
class IoTData;
struct IoTDataDefaultTypeInternal;
extern IoTDataDefaultTypeInternal _IoTData_default_instance_;
}  // namespace c
PROTOBUF_NAMESPACE_OPEN
template<> ::c::EnclaveOutput* Arena::CreateMaybeMessage<::c::EnclaveOutput>(Arena*);
template<> ::c::IoTData* Arena::CreateMaybeMessage<::c::IoTData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace c {

// ===================================================================

class IoTData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:c.IoTData) */ {
 public:
  inline IoTData() : IoTData(nullptr) {}
  ~IoTData() override;
  explicit constexpr IoTData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IoTData(const IoTData& from);
  IoTData(IoTData&& from) noexcept
    : IoTData() {
    *this = ::std::move(from);
  }

  inline IoTData& operator=(const IoTData& from) {
    CopyFrom(from);
    return *this;
  }
  inline IoTData& operator=(IoTData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IoTData& default_instance() {
    return *internal_default_instance();
  }
  static inline const IoTData* internal_default_instance() {
    return reinterpret_cast<const IoTData*>(
               &_IoTData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IoTData& a, IoTData& b) {
    a.Swap(&b);
  }
  inline void Swap(IoTData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IoTData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IoTData* New() const final {
    return new IoTData();
  }

  IoTData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IoTData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IoTData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IoTData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IoTData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "c.IoTData";
  }
  protected:
  explicit IoTData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMIdFieldNumber = 1,
    kIDurFieldNumber = 2,
    kIEndFieldNumber = 3,
    kPAvgFieldNumber = 4,
    kEInFieldNumber = 5,
    kEOutFieldNumber = 6,
  };
  // optional string MId = 1;
  bool has_mid() const;
  private:
  bool _internal_has_mid() const;
  public:
  void clear_mid();
  const std::string& mid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mid();
  PROTOBUF_MUST_USE_RESULT std::string* release_mid();
  void set_allocated_mid(std::string* mid);
  private:
  const std::string& _internal_mid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mid(const std::string& value);
  std::string* _internal_mutable_mid();
  public:

  // optional string IDur = 2;
  bool has_idur() const;
  private:
  bool _internal_has_idur() const;
  public:
  void clear_idur();
  const std::string& idur() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idur(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idur();
  PROTOBUF_MUST_USE_RESULT std::string* release_idur();
  void set_allocated_idur(std::string* idur);
  private:
  const std::string& _internal_idur() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idur(const std::string& value);
  std::string* _internal_mutable_idur();
  public:

  // optional int64 IEnd = 3;
  bool has_iend() const;
  private:
  bool _internal_has_iend() const;
  public:
  void clear_iend();
  ::PROTOBUF_NAMESPACE_ID::int64 iend() const;
  void set_iend(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_iend() const;
  void _internal_set_iend(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional double PAvg = 4;
  bool has_pavg() const;
  private:
  bool _internal_has_pavg() const;
  public:
  void clear_pavg();
  double pavg() const;
  void set_pavg(double value);
  private:
  double _internal_pavg() const;
  void _internal_set_pavg(double value);
  public:

  // optional double EIn = 5;
  bool has_ein() const;
  private:
  bool _internal_has_ein() const;
  public:
  void clear_ein();
  double ein() const;
  void set_ein(double value);
  private:
  double _internal_ein() const;
  void _internal_set_ein(double value);
  public:

  // optional double EOut = 6;
  bool has_eout() const;
  private:
  bool _internal_has_eout() const;
  public:
  void clear_eout();
  double eout() const;
  void set_eout(double value);
  private:
  double _internal_eout() const;
  void _internal_set_eout(double value);
  public:

  // @@protoc_insertion_point(class_scope:c.IoTData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idur_;
  ::PROTOBUF_NAMESPACE_ID::int64 iend_;
  double pavg_;
  double ein_;
  double eout_;
  friend struct ::TableStruct_dataC_2eproto;
};
// -------------------------------------------------------------------

class EnclaveOutput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:c.EnclaveOutput) */ {
 public:
  inline EnclaveOutput() : EnclaveOutput(nullptr) {}
  ~EnclaveOutput() override;
  explicit constexpr EnclaveOutput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnclaveOutput(const EnclaveOutput& from);
  EnclaveOutput(EnclaveOutput&& from) noexcept
    : EnclaveOutput() {
    *this = ::std::move(from);
  }

  inline EnclaveOutput& operator=(const EnclaveOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnclaveOutput& operator=(EnclaveOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnclaveOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnclaveOutput* internal_default_instance() {
    return reinterpret_cast<const EnclaveOutput*>(
               &_EnclaveOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnclaveOutput& a, EnclaveOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(EnclaveOutput* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnclaveOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnclaveOutput* New() const final {
    return new EnclaveOutput();
  }

  EnclaveOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnclaveOutput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnclaveOutput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EnclaveOutput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnclaveOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "c.EnclaveOutput";
  }
  protected:
  explicit EnclaveOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 8088,
    kEnclaveOutputHelloFieldNumber = 8087,
  };
  // repeated .c.IoTData data = 8088;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::c::IoTData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::c::IoTData >*
      mutable_data();
  private:
  const ::c::IoTData& _internal_data(int index) const;
  ::c::IoTData* _internal_add_data();
  public:
  const ::c::IoTData& data(int index) const;
  ::c::IoTData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::c::IoTData >&
      data() const;

  // optional string enclave_output_hello = 8087;
  bool has_enclave_output_hello() const;
  private:
  bool _internal_has_enclave_output_hello() const;
  public:
  void clear_enclave_output_hello();
  const std::string& enclave_output_hello() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_enclave_output_hello(ArgT0&& arg0, ArgT... args);
  std::string* mutable_enclave_output_hello();
  PROTOBUF_MUST_USE_RESULT std::string* release_enclave_output_hello();
  void set_allocated_enclave_output_hello(std::string* enclave_output_hello);
  private:
  const std::string& _internal_enclave_output_hello() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enclave_output_hello(const std::string& value);
  std::string* _internal_mutable_enclave_output_hello();
  public:

  // @@protoc_insertion_point(class_scope:c.EnclaveOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::c::IoTData > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enclave_output_hello_;
  friend struct ::TableStruct_dataC_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IoTData

// optional string MId = 1;
inline bool IoTData::_internal_has_mid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IoTData::has_mid() const {
  return _internal_has_mid();
}
inline void IoTData::clear_mid() {
  mid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IoTData::mid() const {
  // @@protoc_insertion_point(field_get:c.IoTData.MId)
  return _internal_mid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IoTData::set_mid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:c.IoTData.MId)
}
inline std::string* IoTData::mutable_mid() {
  std::string* _s = _internal_mutable_mid();
  // @@protoc_insertion_point(field_mutable:c.IoTData.MId)
  return _s;
}
inline const std::string& IoTData::_internal_mid() const {
  return mid_.Get();
}
inline void IoTData::_internal_set_mid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IoTData::_internal_mutable_mid() {
  _has_bits_[0] |= 0x00000001u;
  return mid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IoTData::release_mid() {
  // @@protoc_insertion_point(field_release:c.IoTData.MId)
  if (!_internal_has_mid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IoTData::set_allocated_mid(std::string* mid) {
  if (mid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:c.IoTData.MId)
}

// optional string IDur = 2;
inline bool IoTData::_internal_has_idur() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IoTData::has_idur() const {
  return _internal_has_idur();
}
inline void IoTData::clear_idur() {
  idur_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IoTData::idur() const {
  // @@protoc_insertion_point(field_get:c.IoTData.IDur)
  return _internal_idur();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IoTData::set_idur(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 idur_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:c.IoTData.IDur)
}
inline std::string* IoTData::mutable_idur() {
  std::string* _s = _internal_mutable_idur();
  // @@protoc_insertion_point(field_mutable:c.IoTData.IDur)
  return _s;
}
inline const std::string& IoTData::_internal_idur() const {
  return idur_.Get();
}
inline void IoTData::_internal_set_idur(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  idur_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IoTData::_internal_mutable_idur() {
  _has_bits_[0] |= 0x00000002u;
  return idur_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IoTData::release_idur() {
  // @@protoc_insertion_point(field_release:c.IoTData.IDur)
  if (!_internal_has_idur()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return idur_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IoTData::set_allocated_idur(std::string* idur) {
  if (idur != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  idur_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idur,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:c.IoTData.IDur)
}

// optional int64 IEnd = 3;
inline bool IoTData::_internal_has_iend() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IoTData::has_iend() const {
  return _internal_has_iend();
}
inline void IoTData::clear_iend() {
  iend_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IoTData::_internal_iend() const {
  return iend_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IoTData::iend() const {
  // @@protoc_insertion_point(field_get:c.IoTData.IEnd)
  return _internal_iend();
}
inline void IoTData::_internal_set_iend(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  iend_ = value;
}
inline void IoTData::set_iend(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_iend(value);
  // @@protoc_insertion_point(field_set:c.IoTData.IEnd)
}

// optional double PAvg = 4;
inline bool IoTData::_internal_has_pavg() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IoTData::has_pavg() const {
  return _internal_has_pavg();
}
inline void IoTData::clear_pavg() {
  pavg_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double IoTData::_internal_pavg() const {
  return pavg_;
}
inline double IoTData::pavg() const {
  // @@protoc_insertion_point(field_get:c.IoTData.PAvg)
  return _internal_pavg();
}
inline void IoTData::_internal_set_pavg(double value) {
  _has_bits_[0] |= 0x00000008u;
  pavg_ = value;
}
inline void IoTData::set_pavg(double value) {
  _internal_set_pavg(value);
  // @@protoc_insertion_point(field_set:c.IoTData.PAvg)
}

// optional double EIn = 5;
inline bool IoTData::_internal_has_ein() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IoTData::has_ein() const {
  return _internal_has_ein();
}
inline void IoTData::clear_ein() {
  ein_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double IoTData::_internal_ein() const {
  return ein_;
}
inline double IoTData::ein() const {
  // @@protoc_insertion_point(field_get:c.IoTData.EIn)
  return _internal_ein();
}
inline void IoTData::_internal_set_ein(double value) {
  _has_bits_[0] |= 0x00000010u;
  ein_ = value;
}
inline void IoTData::set_ein(double value) {
  _internal_set_ein(value);
  // @@protoc_insertion_point(field_set:c.IoTData.EIn)
}

// optional double EOut = 6;
inline bool IoTData::_internal_has_eout() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool IoTData::has_eout() const {
  return _internal_has_eout();
}
inline void IoTData::clear_eout() {
  eout_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double IoTData::_internal_eout() const {
  return eout_;
}
inline double IoTData::eout() const {
  // @@protoc_insertion_point(field_get:c.IoTData.EOut)
  return _internal_eout();
}
inline void IoTData::_internal_set_eout(double value) {
  _has_bits_[0] |= 0x00000020u;
  eout_ = value;
}
inline void IoTData::set_eout(double value) {
  _internal_set_eout(value);
  // @@protoc_insertion_point(field_set:c.IoTData.EOut)
}

// -------------------------------------------------------------------

// EnclaveOutput

// optional string enclave_output_hello = 8087;
inline bool EnclaveOutput::_internal_has_enclave_output_hello() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EnclaveOutput::has_enclave_output_hello() const {
  return _internal_has_enclave_output_hello();
}
inline void EnclaveOutput::clear_enclave_output_hello() {
  enclave_output_hello_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EnclaveOutput::enclave_output_hello() const {
  // @@protoc_insertion_point(field_get:c.EnclaveOutput.enclave_output_hello)
  return _internal_enclave_output_hello();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnclaveOutput::set_enclave_output_hello(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 enclave_output_hello_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:c.EnclaveOutput.enclave_output_hello)
}
inline std::string* EnclaveOutput::mutable_enclave_output_hello() {
  std::string* _s = _internal_mutable_enclave_output_hello();
  // @@protoc_insertion_point(field_mutable:c.EnclaveOutput.enclave_output_hello)
  return _s;
}
inline const std::string& EnclaveOutput::_internal_enclave_output_hello() const {
  return enclave_output_hello_.Get();
}
inline void EnclaveOutput::_internal_set_enclave_output_hello(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  enclave_output_hello_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EnclaveOutput::_internal_mutable_enclave_output_hello() {
  _has_bits_[0] |= 0x00000001u;
  return enclave_output_hello_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EnclaveOutput::release_enclave_output_hello() {
  // @@protoc_insertion_point(field_release:c.EnclaveOutput.enclave_output_hello)
  if (!_internal_has_enclave_output_hello()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return enclave_output_hello_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EnclaveOutput::set_allocated_enclave_output_hello(std::string* enclave_output_hello) {
  if (enclave_output_hello != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enclave_output_hello_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enclave_output_hello,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:c.EnclaveOutput.enclave_output_hello)
}

// repeated .c.IoTData data = 8088;
inline int EnclaveOutput::_internal_data_size() const {
  return data_.size();
}
inline int EnclaveOutput::data_size() const {
  return _internal_data_size();
}
inline void EnclaveOutput::clear_data() {
  data_.Clear();
}
inline ::c::IoTData* EnclaveOutput::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:c.EnclaveOutput.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::c::IoTData >*
EnclaveOutput::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:c.EnclaveOutput.data)
  return &data_;
}
inline const ::c::IoTData& EnclaveOutput::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::c::IoTData& EnclaveOutput::data(int index) const {
  // @@protoc_insertion_point(field_get:c.EnclaveOutput.data)
  return _internal_data(index);
}
inline ::c::IoTData* EnclaveOutput::_internal_add_data() {
  return data_.Add();
}
inline ::c::IoTData* EnclaveOutput::add_data() {
  ::c::IoTData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:c.EnclaveOutput.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::c::IoTData >&
EnclaveOutput::data() const {
  // @@protoc_insertion_point(field_list:c.EnclaveOutput.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace c

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dataC_2eproto
